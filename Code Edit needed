#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <SDL2/SDL.h>

#define WINDOW_WIDTH 300
#define WINDOW_HEIGHT 300

int nCols = 30;
int nRows = 30;

float columnWidth;
float rowHeight;

typedef struct Node {
    int row;
    int col;
    int dx;
    int dy;
    struct Node* next;
    struct Node* prev;
} Node;

typedef struct {
    Node* head;
    Node* tail;
} LinkedList;

typedef struct {
    LinkedList* snake;
    int goalColumn;
    int goalRow;
    int score;
} SnakeGame;

SnakeGame* snakeGame;

char nextInput = '\0';
bool gameOver = false;

SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;

void setup() {
    SDL_Init(SDL_INIT_VIDEO);
    window = SDL_CreateWindow("Snake Game", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WINDOW_WIDTH, WINDOW_HEIGHT, 0);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    columnWidth = WINDOW_WIDTH / (float)nCols;
    rowHeight = WINDOW_HEIGHT / (float)nRows;

    srand(time(NULL));

    snakeGame = malloc(sizeof(SnakeGame));
    snakeGame->snake = malloc(sizeof(LinkedList));
    snakeGame->snake->head = NULL;
    snakeGame->snake->tail = NULL;
    snakeGame->score = 0;

    // Initialize the game
    resetGame(snakeGame);
}

void resetGame(SnakeGame* game) {
    // Free existing snake nodes if any
    Node* current = game->snake->head;
    while (current != NULL) {
        Node* temp = current;
        current = current->next;
        free(temp);
    }

    game->snake->head = NULL;
    game->snake->tail = NULL;
    game->score = 0;

    // Create initial snake
    for (int i = 0; i < 8; i++) {
        Node* newNode = malloc(sizeof(Node));
        newNode->row = nRows / 2;
        newNode->col = nCols / 2 - i;
        newNode->dx = 1;
        newNode->dy = 0;
        newNode->next = game->snake->head;
        newNode->prev = NULL;
        if (game->snake->head != NULL) {
            game->snake->head->prev = newNode;
        }
        game->snake->head = newNode;
        if (game->snake->tail == NULL) {
            game->snake->tail = newNode;
        }
    }

    resetGoal(game);
}

void resetGoal(SnakeGame* game) {
    game->goalColumn = rand() % nCols;
    game->goalRow = rand() % nRows;
}

void gameOverScreen(SnakeGame* game) {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    // Render game over text and score
    // Note: SDL2 doesn't have built-in text rendering. You'd need to use SDL_ttf or create your own text rendering method.

    SDL_RenderPresent(renderer);
    resetGame(game);
}

bool checkGoal(SnakeGame* game, int column, int row) {
    return column == game->goalColumn && row == game->goalRow;
}

void submitMove(SnakeGame* game, char input) {
    if (input == 'U' && game->snake->head->dy != 1) {
        game->snake->head->dx = 0;
        game->snake->head->dy = -1;
    } else if (input == 'D' && game->snake->head->dy != -1) {
        game->snake->head->dx = 0;
        game->snake->head->dy = 1;
    } else if (input == 'L' && game->snake->head->dx != 1) {
        game->snake->head->dx = -1;
        game->snake->head->dy = 0;
    } else if (input == 'R' && game->snake->head->dx != -1) {
        game->snake->head->dx = 1;
        game->snake->head->dy = 0;
    } else if (input == 'S') {
        // Reverse snake direction
        Node* current = game->snake->head;
        Node* temp = NULL;
        while (current != NULL) {
            temp = current->next;
            current->next = current->prev;
            current->prev = temp;
            current->dx *= -1;
            current->dy *= -1;
            current = temp;
        }
        temp = game->snake->head;
        game->snake->head = game->snake->tail;
        game->snake->tail = temp;
    }
}

void update(SnakeGame* game) {
    // Update snake position
    Node* newHead = malloc(sizeof(Node));
    newHead->row = (game->snake->head->row + game->snake->head->dy + nRows) % nRows;
    newHead->col = (game->snake->head->col + game->snake->head->dx + nCols) % nCols;
    newHead->dx = game->snake->head->dx;
    newHead->dy = game->snake->head->dy;
    newHead->next = game->snake->head;
    newHead->prev = NULL;
    game->snake->head->prev = newHead;
    game->snake->head = newHead;

    if (checkGoal(game, newHead->col, newHead->row)) {
        game->score++;
        resetGoal(game);
    } else {
        Node* oldTail = game->snake->tail;
        game->snake->tail = game->snake->tail->prev;
        game->snake->tail->next = NULL;
        free(oldTail);
    }
}

void display(SnakeGame* game) {
    SDL_SetRenderDrawColor(renderer, 180, 195, 20, 255);
    SDL_RenderClear(renderer);

    // Draw snake
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    Node* current = game->snake->head;
    while (current != NULL) {
        SDL_Rect rect = {current->col * columnWidth, current->row * rowHeight, columnWidth, rowHeight};
        SDL_RenderFillRect(renderer, &rect);
        current = current->next;
    }

    // Draw goal
    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    SDL_Rect goalRect = {game->goalColumn * columnWidth, game->goalRow * rowHeight, columnWidth, rowHeight};
    SDL_RenderFillRect(renderer, &goalRect);

    SDL_RenderPresent(renderer);
}

bool checkCollision(SnakeGame* game) {
    Node* head = game->snake->head;
    Node* current = head->next;
    while (current != NULL) {
        if (head->row == current->row && head->col == current->col) {
            return true;
        }
        current = current->next;
    }
    return false;
}

int main() {
    setup();

    SDL_Event event;
    bool quit = false;

    while (!quit) {
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                quit = true;
            } else if (event.type == SDL_KEYDOWN) {
                switch (event.key.keysym.sym) {
                    case SDLK_UP:
                        nextInput = 'U';
                        break;
                    case SDLK_DOWN:
                        nextInput = 'D';
                        break;
                    case SDLK_LEFT:
                        nextInput = 'L';
                        break;
                    case SDLK_RIGHT:
                        nextInput = 'R';
                        break;
                    case SDLK_LSHIFT:
                    case SDLK_RSHIFT:
                        nextInput = 'S';
                        break;
                    case SDLK_SPACE:
                        if (gameOver) {
                            gameOver = false;
                            resetGame(snakeGame);
                        }
                        break;
                }
            }
        }

        if (!gameOver) {
            submitMove(snakeGame, nextInput);
            update(snakeGame);
            display(snakeGame);
            if (checkCollision(snakeGame)) {
                gameOver = true;
                gameOverScreen(snakeGame);
            }
            nextInput = '\0';
        }

        SDL_Delay(40);  // Roughly 25 FPS
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}


